# ===========================================================================
#
# file     : font.py
# part of  : godafoss micropython library
# url      : https://www.github.com/wovo/godafoss
# author   : Wouter van Ooijen (wouter@voti.nl) 2024
# license  : MIT license, see license attribute (from license.py)
#
# ===========================================================================

import godafoss as gf


# ===========================================================================

class font:
    """
    a character font

    :param size: (:class:`~godafoss.xy`)
        the size of a glyph

    A character font defines a
    :class:`~godafoss.glyph`
    (monochrome image) for each character in the font.
    Each font has a fixed character height, equal to size.y.
    A proportional font has a size.x == 0.
    For a fixed width font size.x is the witdh of each character.
    """

    # =======================================================================

    def __init__(
        self,
        size: gf.xy
    ):
        self.size = size

    # =======================================================================

    #def read(
    #    self,
    #    c: chr
    #) -> gf.glyph:
    #    """
    #    the :class:`~godafoss.glyph` for the specified character
    #
    #    :param c: (chr)
    #        the char for which the :class:`~godafoss.glyph` is retrieved
    #    """
    #    raise NotImplementedError


# ===========================================================================

class _default_font_image( gf.glyph ):
    """
    glyph of the built-in 8x8 font
    """

    def __init__( self, c ):
        gf.glyph.__init__( self, gf.xy( 8, 8 ) )

        import framebuf
        buf = bytearray(( self.size.y // 8 ) * self.size.x )
        self._charbuf = framebuf.FrameBuffer( buf, 8, 8, framebuf.MONO_VLSB )
        self._charbuf.fill( 0 )
        self._charbuf.text( c, 0, 0 )

    def read(
        self,
        location: gf.xy
    ) -> bool:
        return self._charbuf.pixel( location.x, location.y )


# ===========================================================================

class default_font( font ):
    """
    the micropython built-in 8x8 font
    """

    def __init__( self ):
        font.__init__( self, xy( 8, 8 ) )

    def read( self, c: chr ) -> gf.glyph:
        return _default_font_image( c )


# ===========================================================================

class font_default( font ):
    """
    the micropython built-in 8 x 8 font
    """

    def __init__( self ):
        font.__init__( self, gf.xy( 8, 8 ) )


# ===========================================================================
# from https://github.com/dhepper/font8x8/raw/master/font8x8_basic.h
_pixels = (
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0000 (nul)
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0001
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0002
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0003
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0004
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0005
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0006
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0007
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0008
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0009
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 000A
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 000B
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 000C
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 000D
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 000E
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 000F
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0010
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0011
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0012
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0013
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0014
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0015
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0016
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0017
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0018
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0019
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 001A
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 001B
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 001C
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 001D
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 001E
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 001F
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0020 (space)
    ( 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 ), # 0021 (!)
    ( 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0022 (")
    ( 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00 ), # 0023 (#)
    ( 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00 ), # 0024 ($)
    ( 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00 ), # 0025 (%)
    ( 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00 ), # 0026 (&)
    ( 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0027 (')
    ( 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00 ), # 0028 (()
    ( 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00 ), # 0029 ())
    ( 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 ), # 002A (*)
    ( 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00 ), # 002B (+)
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06 ), # 002C (,)
    ( 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 ), # 002D (-)
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 ), # 002E (.)
    ( 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 ), # 002F (/)
    ( 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 ), # 0030 (0)
    ( 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 ), # 0031 (1)
    ( 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 ), # 0032 (2)
    ( 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 ), # 0033 (3)
    ( 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 ), # 0034 (4)
    ( 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 ), # 0035 (5)
    ( 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 ), # 0036 (6)
    ( 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 ), # 0037 (7)
    ( 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 ), # 0038 (8)
    ( 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 ), # 0039 (9)
    ( 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00 ), # 003A (:)
    ( 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06 ), # 003B (;)
    ( 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00 ), # 003C (<)
    ( 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00 ), # 003D (=)
    ( 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00 ), # 003E (>)
    ( 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00 ), # 003F (?)
    ( 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00 ), # 0040 (@)
    ( 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 ), # 0041 (A)
    ( 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 ), # 0042 (B)
    ( 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 ), # 0043 (C)
    ( 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 ), # 0044 (D)
    ( 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 ), # 0045 (E)
    ( 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 ), # 0046 (F)
    ( 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 ), # 0047 (G)
    ( 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 ), # 0048 (H)
    ( 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), # 0049 (I)
    ( 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 ), # 004A (J)
    ( 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 ), # 004B (K)
    ( 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 ), # 004C (L)
    ( 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 ), # 004D (M)
    ( 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 ), # 004E (N)
    ( 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 ), # 004F (O)
    ( 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 ), # 0050 (P)
    ( 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 ), # 0051 (Q)
    ( 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 ), # 0052 (R)
    ( 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 ), # 0053 (S)
    ( 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), # 0054 (T)
    ( 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 ), # 0055 (U)
    ( 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ), # 0056 (V)
    ( 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 ), # 0057 (W)
    ( 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 ), # 0058 (X)
    ( 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 ), # 0059 (Y)
    ( 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 ), # 005A (Z)
    ( 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00 ), # 005B ([)
    ( 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00 ), # 005C (\)
    ( 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00 ), # 005D (])
    ( 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 ), # 005E (^)
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ), # 005F (_)
    ( 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 0060 (`)
    ( 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00 ), # 0061 (a)
    ( 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00 ), # 0062 (b)
    ( 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00 ), # 0063 (c)
    ( 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00 ), # 0064 (d)
    ( 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00 ), # 0065 (e)
    ( 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00 ), # 0066 (f)
    ( 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F ), # 0067 (g)
    ( 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00 ), # 0068 (h)
    ( 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), # 0069 (i)
    ( 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E ), # 006A (j)
    ( 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00 ), # 006B (k)
    ( 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), # 006C (l)
    ( 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00 ), # 006D (m)
    ( 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00 ), # 006E (n)
    ( 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00 ), # 006F (o)
    ( 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F ), # 0070 (p)
    ( 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78 ), # 0071 (q)
    ( 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00 ), # 0072 (r)
    ( 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00 ), # 0073 (s)
    ( 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00 ), # 0074 (t)
    ( 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00 ), # 0075 (u)
    ( 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ), # 0076 (v)
    ( 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00 ), # 0077 (w)
    ( 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00 ), # 0078 (x)
    ( 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F ), # 0079 (y)
    ( 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00 ), # 007A (z)
    ( 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00 ), # 007B (()
    ( 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ), # 007C (|)
    ( 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00 ), # 007D (})
    ( 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 007E (~)
    ( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), # 007F
)


# ===========================================================================

class font_default_image_native( gf.glyph ):

    def __init__( self, c ):
        gf.glyph.__init__( self, gf.xy( 8, 8 ) )
        self._c = c

    def read(
        self,
        location: gf.xy
    ) -> bool:
        b = _pixels[ ord( self._c ) ][ location.y ]
        return ( b & ( 0x01 << location.x ) ) != 0


# ===========================================================================
