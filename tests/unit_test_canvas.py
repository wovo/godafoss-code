# ===========================================================================
#
# file     : unit_test_canvas.py
# part of  : godafoss micropython library
# url      : https://www.github.com/wovo/godafoss
# author   : Wouter van Ooijen (wouter@voti.nl) 2024
# license  : MIT license, see license attribute (from license.py)
#
# ===========================================================================

import godafoss as gf


# ===========================================================================

def unit_test_canvas():
    print( "test canvas" )

    canvas = gf.canvas_dummy( gf.xy( 40, 10 ) )
    canvas.clear()
    str( canvas )
    #print( canvas )
    assert canvas.lines() == [
        "........................................",
        "........................................",
        "........................................",
        "........................................",
        "........................................",
        "........................................",
        "........................................",
        "........................................",
        "........................................",
        "........................................",
    ]

    canvas.clear()
    canvas.write( gf.line( gf.xy( 36, 5 ) ), gf.xy(  2, 2 ) )
    canvas.write(
       gf.line( gf.xy( 38, 0 ) ) @ gf.xy(  1, 0 )
       + gf.line( gf.xy(  0, 8 ) ) @ gf.xy(  0, 1 )
       + gf.xy( 10, 8 ) @ gf.line( gf.xy( -3,-3 ) )
    )
    #print( canvas )
    assert canvas.lines() == [
        ".**************************************.",
        "*.......................................",
        "*.****..................................",
        "*.....*******...........................",
        "*............********...................",
        "*....................*******............",
        "*.......*...................*******.....",
        "*........*.........................***..",
        "*.........*.............................",
        "........................................",
    ]

    canvas.clear()
    canvas.write( gf.rectangle( gf.xy( 38, 8 ) ), gf.xy(  1, 1 ) )
    canvas.write(
        gf.rectangle( gf.xy(  5, 5 ), fill = True ),
        gf.xy(  3, 3 )
    )
    #print( canvas )
    assert canvas.lines() == [
        "........................................",
        ".**************************************.",
        ".*....................................*.",
        ".*.*****..............................*.",
        ".*.*****..............................*.",
        ".*.*****..............................*.",
        ".*.*****..............................*.",
        ".*.*****..............................*.",
        ".**************************************.",
        "........................................",
    ]

    canvas.clear()
    canvas.write( gf.circle(  4 ), gf.xy( 15,  5 ) )
    canvas.write( gf.circle( 10 ) @ gf.xy( -2, -2 ) )
    canvas.write(
        gf.circle( 4, fill = True ),
        gf.xy( 25, 5 )
    )
    canvas.write( gf.circle( 0 ), gf.xy(  1, 1 ) )
    #print( canvas )
    assert canvas.lines() == [
        "........*...............................",
        "........*.....***.......***.............",
        ".......*....**...**...*******...........",
        ".......*....*.....*...*******...........",
        "......*....*.......*.*********..........",
        ".....*.....*.......*.*********..........",
        "....*......*.......*.*********..........",
        "..**........*.....*...*******...........",
        "**..........**...**...*******...........",
        "..............***.......***.............",
    ]

    canvas.clear()
    #canvas.write( "Hi", gf.xy(  2,  2 ) )
    #print( canvas )
    if 0: assert canvas.lines() == [
        "........*...............................",
        "........*.....***.......***.............",
        ".......*....**...**...*******...........",
        ".......*....*.....*...*******...........",
        "......*....*.......*.*********..........",
        ".....*.....*.......*.*********..........",
        "....*......*.......*.*********..........",
        "..**........*.....*...*******...........",
        "**..........**...**...*******...........",
        "..............***.......***.............",
    ]

    canvas.flush()
    canvas.flush_count = 0
    canvas.flush()
    assert canvas.flush_count == 0
    canvas.write_pixel( gf.xy( 0, 0 ))
    canvas.flush()
    assert canvas.flush_count == 1
    canvas.flush()
    assert canvas.flush_count == 1
    canvas.clear()
    canvas.flush()
    assert canvas.flush_count == 2

    c = canvas.inverted()
    c.clear()
    #print( canvas )
    assert canvas.lines() == [
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
        "****************************************",
    ]

    c.write(
        gf.rectangle( gf.xy( 20, 5 ), fill = True ),
        gf.xy(  3, 3 )
    )
    #print( canvas )
    assert canvas.lines() == [
        "****************************************",
        "****************************************",
        "****************************************",
        "***....................*****************",
        "***....................*****************",
        "***....................*****************",
        "***....................*****************",
        "***....................*****************",
        "****************************************",
        "****************************************",
    ]

    c.flush()
    canvas.flush_count = 0
    c.write_pixel( gf.xy( 0, 0 ))
    c.flush()
    assert canvas.flush_count == 1
    c.flush()
    canvas.flush()
    assert canvas.flush_count == 1

    c = canvas.rotated( 90 )
    c.write(
        gf.rectangle( gf.xy( 8, 4 ), fill = True ),
        gf.xy( 1, 1 )
    )
    #print( canvas )
    assert canvas.lines() == [
        ".***************************************",
        "****************************************",
        "****************************************",
        "***....................*****************",
        "***....................*****************",
        "***....................*****************",
        "***....................*****************",
        "***....................*****************",
        "****************************************",
        "****************************************",
    ]

    c1 = gf.canvas_dummy( gf.xy( 20, 10 ) )
    c2 = gf.canvas_dummy( gf.xy( 20, 10 ) )
    #c1.extended
    canvas = c1.extend( c2 )
    canvas.clear()
    canvas.write( gf.xy( 1,1 ) @ gf.line( gf.xy( 38, 8 ) ) )
    #print( c1 )
    #print( c2 )
    assert c1.lines() == [
        "....................",
        ".***................",
        "....*****...........",
        ".........****.......",
        ".............*****..",
        "..................**",
        "....................",
        "....................",
        "....................",
        "....................",
    ]
    assert c2.lines() == [
        "....................",
        "....................",
        "....................",
        "....................",
        "....................",
        "***.................",
        "...*****............",#
        "........****........",
        "............*****...",
        ".................**.",
    ]

    try:
        c1.extended( c2, orientation = "" )
        assert False
    except:
        pass

    try:
        c1.extended( c2, orientation = "XE" )
        assert False
    except:
        pass


# ===========================================================================
